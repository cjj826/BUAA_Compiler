@global0 = constant i32 1
@global1 = constant i32 2
@global2 = constant i32 3
@global3 = constant i32 4
@global4 = global i32 10
@global5 = global i32 20
@global6 = global i32 99
@global7 = global i32 66
@str0 = constant [15 x i8] c"Got a number: \00"
@str1 = constant [3 x i8] c"!\0a\00"
@str2 = constant [10 x i8] c"19373348\0a\00"
@str3 = constant [2 x i8] c"\0a\00"
declare i32 @getint()
declare void @putint(i32)
declare void @putch(i32)
declare void @putstr(i8*)
define i32 @gi() {
Block26:
	%reg51 = call i32 @getint()
	%loc6 = getelementptr inbounds [15 x i8], [15 x i8]* @str0, i32 0, i32 0
	call void @putstr(i8* %loc6)
	call void @putint(i32 %reg51)
	%loc7 = getelementptr inbounds [3 x i8], [3 x i8]* @str1, i32 0, i32 0
	call void @putstr(i8* %loc7)
	ret i32 %reg51
}
define void @f0() {
Block0:
	ret void
}
define i32 @main() {
Block27:
	%loc8 = getelementptr inbounds [10 x i8], [10 x i8]* @str2, i32 0, i32 0
	call void @putstr(i8* %loc8)
	%reg54 = call i32 @gi()
	%reg55 = call i32 @f2(i32 1, i32 2, i32 %reg54)
	call void @f0()
	call void @putint(i32 %reg55)
	%loc10 = getelementptr inbounds [2 x i8], [2 x i8]* @str3, i32 0, i32 0
	call void @putstr(i8* %loc10)
	%reg57 = call i32 @gi()
	%reg58 = call i32 @f1(i32 %reg57)
	call void @putint(i32 %reg58)
	call void @putstr(i8* %loc10)
	%reg60 = call i32 @gi()
	%reg61 = call i32 @f2(i32 %reg55, i32 1, i32 %reg60)
	call void @putint(i32 %reg61)
	call void @putstr(i8* %loc10)
	%reg64 = load i32, i32* @global4
	%reg65 = call i32 @gi()
	%reg66 = call i32 @f2(i32 %reg61, i32 %reg64, i32 %reg65)
	call void @putint(i32 %reg66)
	call void @putstr(i8* %loc10)
	%reg69 = call i32 @gi()
	%reg70 = load i32, i32* @global7
	%reg71 = call i32 @f2(i32 %reg66, i32 %reg69, i32 %reg70)
	call void @putint(i32 %reg71)
	call void @putstr(i8* %loc10)
	ret i32 0
}
define i32 @f1(i32 %f0) {
Block1:
	%reg1 = icmp sge i32 %f0, 0
	br i1 %reg1, label %Block2, label %Block28
Block2:
	%reg3 = add i32 %f0, 1
	move %reg3 to %reg73
	br label %Block3
Block3:
	%reg5 = icmp sle i32 %reg73, 0
	br i1 %reg5, label %Block4, label %Block5
Block4:
	%reg7 = add i32 %reg73, 1
	move %reg7 to %reg74
	br label %Block6
Block5:
	move %reg73 to %reg74
	br label %Block6
Block6:
	%reg9 = add i32 %reg74, 1
	move %reg9 to %reg75
	br label %Block7
Block7:
	%reg11 = icmp slt i32 %reg75, 0
	br i1 %reg11, label %Block8, label %Block9
Block8:
	%reg13 = sub i32 0, %reg75
	move %reg13 to %reg75
	br label %Block7
Block9:
	move %reg75 to %reg76
	br label %Block10
Block10:
	%reg15 = icmp sgt i32 %reg76, 0
	br i1 %reg15, label %Block11, label %Block12
Block11:
	%reg17 = sub i32 0, %reg76
	move %reg17 to %reg76
	br label %Block10
Block12:
	move %reg76 to %reg77
	br label %Block13
Block13:
	%reg19 = icmp eq i32 %reg77, 0
	br i1 %reg19, label %Block14, label %Block16
Block14:
	%reg21 = add i32 %reg77, 1
	move %reg21 to %reg77
	br label %Block13
Block16:
	%reg23 = icmp ne i32 %reg77, 0
	br i1 %reg23, label %Block21, label %Block21
Block21:
	ret i32 %reg77
Block28:
	move %f0 to %reg73
	br label %Block3
}
define i32 @f2(i32 %f1, i32 %f2, i32 %f3) {
Block25:
	%reg28 = load i32, i32* @global4
	%reg29 = mul i32 %reg28, 2
	%reg30 = add i32 %f1, %reg29
	%reg31 = load i32, i32* @global5
	%reg32 = sdiv i32 %reg31, 3
	%reg33 = sub i32 %reg30, %reg32
	%reg35 = srem i32 %f3, 3
	%reg36 = add i32 %reg33, %reg35
	%reg37 = add i32 %reg36, 233
	%reg39 = sub i32 0, %f2
	%reg40 = add i32 %reg37, %reg39
	%reg42 = call i32 @f1(i32 %f2)
	%reg43 = add i32 %reg40, %reg42
	%reg48 = add i32 %f1, %f2
	%reg50 = add i32 %reg48, %reg43
	ret i32 %reg50
}
