undefined error in Lexer! in line 79
SEMICN 13
Undefined Grammar Wrong!
SEMICN 13
Undefined Grammar Wrong!
SEMICN 13
Undefined Grammar Wrong!
init frontend.ir.Value.ConstantInteger@41629346
init frontend.ir.Value.ConstantInteger@214c265e
init frontend.ir.Value.ConstantInteger@448139f0
init frontend.ir.Value.ConstantInteger@7cca494b
init frontend.ir.Value.ConstantInteger@7ba4f24f
init frontend.ir.Value.ConstantInteger@3b9a45b3
init frontend.ir.Value.ConstantInteger@7699a589
init frontend.ir.Value.ConstantInteger@58372a00
symbol is MINU
symbol is MINU
symbol is NOT
symbol is MINU
symbol is PLUS
the out is "Got a number: "
the out is "%d!\n"
the out is "19373348\n"
init %reg55 = call i32 @f2(i32 1, i32 2, i32 %reg54)
the out is "%d\n"
the out is "%d\n"
init %reg61 = call i32 @f2(i32 %reg59, i32 1, i32 %reg60)
the out is "%d\n"
the out is "%d\n"
the out is "%d\n"
del: %loc5 = alloca i32
del: store i32 %reg51, i32* %loc5
del: %reg52 = load i32, i32* %loc5
del: %reg53 = load i32, i32* %loc5
del: %loc14 = alloca i32
del: store i32 0, i32* %loc14
del: %reg72 = load i32, i32* %loc14
del: %loc13 = alloca i32
del: store i32 %reg66, i32* %loc13
del: %reg67 = load i32, i32* %loc13
del: %reg68 = load i32, i32* %loc13
del: %loc12 = alloca i32
del: store i32 %reg61, i32* %loc12
del: %reg62 = load i32, i32* %loc12
del: %reg63 = load i32, i32* %loc12
del: %loc9 = alloca i32
del: store i32 %reg55, i32* %loc9
del: %reg56 = load i32, i32* %loc9
del: %reg59 = load i32, i32* %loc9
del: %loc0 = alloca i32
del: store i32 %f0, i32* %loc0
del: store i32 %reg3, i32* %loc0
del: store i32 %reg7, i32* %loc0
del: store i32 %reg9, i32* %loc0
del: store i32 %reg13, i32* %loc0
del: store i32 %reg17, i32* %loc0
del: store i32 %reg21, i32* %loc0
del: %reg0 = load i32, i32* %loc0
del: %reg2 = load i32, i32* %loc0
del: %reg4 = load i32, i32* %loc0
del: %reg6 = load i32, i32* %loc0
del: %reg8 = load i32, i32* %loc0
del: %reg10 = load i32, i32* %loc0
del: %reg12 = load i32, i32* %loc0
del: %reg14 = load i32, i32* %loc0
del: %reg16 = load i32, i32* %loc0
del: %reg18 = load i32, i32* %loc0
del: %reg20 = load i32, i32* %loc0
del: %reg22 = load i32, i32* %loc0
del: %reg26 = load i32, i32* %loc0
del: %loc4 = alloca i32
del: store i32 %reg43, i32* %loc4
del: store i32 %reg45, i32* %loc4
del: %reg44 = load i32, i32* %loc4
del: %reg49 = load i32, i32* %loc4
del: %loc3 = alloca i32
del: store i32 %f3, i32* %loc3
del: %reg34 = load i32, i32* %loc3
del: %loc2 = alloca i32
del: store i32 %f2, i32* %loc2
del: %reg38 = load i32, i32* %loc2
del: %reg41 = load i32, i32* %loc2
del: %reg47 = load i32, i32* %loc2
del: %loc1 = alloca i32
del: store i32 %f1, i32* %loc1
del: %reg27 = load i32, i32* %loc1
del: %reg46 = load i32, i32* %loc1
del: %loc11 = getelementptr inbounds [2 x i8], [2 x i8]* @str3, i32 0, i32 0
del: %loc15 = getelementptr inbounds [2 x i8], [2 x i8]* @str3, i32 0, i32 0
del: %loc16 = getelementptr inbounds [2 x i8], [2 x i8]* @str3, i32 0, i32 0
del: %loc17 = getelementptr inbounds [2 x i8], [2 x i8]* @str3, i32 0, i32 0
del: %reg24 = icmp ne i32 1, 0
del: br i1 1, label %Block20, label %Block21
del: %reg25 = icmp eq i32 0, 1
del: br i1 0, label %Block23, label %Block24
del: %reg45 = mul i32 %reg43, 1
del: %reg73 = phi i32 [ %f0, %Block2 ], [ %reg3, %Block28 ]
del: %reg74 = phi i32 [ %reg7, %Block4 ], [ %reg73, %Block5 ]
del: %reg75 = phi i32 [ %reg9, %Block6 ], [ %reg13, %Block8 ]
del: %reg76 = phi i32 [ %reg75, %Block9 ], [ %reg17, %Block11 ]
del: %reg77 = phi i32 [ %reg76, %Block12 ], [ %reg21, %Block14 ]
the block Block23 has been removed
del: br label %Block22
the block Block15 has been removed
del: br label %Block16
the block Block17 has been removed
del: br label %Block18
the block Block18 has been removed
del: br label %Block19
the block Block19 has been removed
del: br label %Block20
the block Block20 has been removed
del: br label %Block22
the block Block22 has been removed
del: br label %Block24
the block Block24 has been removed
del: br label %Block21
溢出时存储变量值的sp
溢出时存储变量值的sp
溢出时存储变量值的sp
溢出时存储变量值的sp
溢出时存储变量值的sp
溢出时存储变量值的sp
the mips code is:

.data
global0: .word 1
global1: .word 2
global2: .word 3
global3: .word 4
global4: .word 10
global5: .word 20
global6: .word 99
global7: .word 66
str0: .asciiz "Got a number: "
str1: .asciiz "!\n"
str2: .asciiz "19373348\n"
str3: .asciiz "\n"
.text
j main
gi:
Block26:
li $v0, 5
syscall
move $v1, $v0

la $a2, str0

la $a0, ($a2)
li $v0, 4
syscall

move $a0, $v1
li $v0, 1
syscall

la $a1, str1

la $a0, ($a1)
li $v0, 4
syscall

move $v0, $v1
jr $ra


f0:
Block0:
jr $ra


main:
addi $sp, $sp, -8
Block27:
la $s0, str2

la $a0, ($s0)
li $v0, 4
syscall

addi $sp, $sp, -4
sw $ra, 0($sp)
jal gi
lw $ra, 0($sp)
addi $sp, $sp, 4
move $t0, $v0

addi $sp, $sp, -4
sw $ra, 0($sp)
addi $sp, $sp, -12
li $a0, 1
sw $a0, 8($sp)
li $a0, 2
sw $a0, 4($sp)
sw $t0, 0($sp)
jal f2
lw $ra, 0($sp)
addi $sp, $sp, 4
move $a2, $v0

addi $sp, $sp, -8
sw $ra, 0($sp)
sw $a2, 4($sp)
jal f0
lw $ra, 0($sp)
lw $a2, 4($sp)
addi $sp, $sp, 8

move $a0, $a2
li $v0, 1
syscall

la $v1, str3

la $a0, ($v1)
li $v0, 4
syscall

addi $sp, $sp, -12
sw $ra, 0($sp)
sw $a2, 4($sp)
sw $v1, 8($sp)
jal gi
lw $ra, 0($sp)
lw $a2, 4($sp)
lw $v1, 8($sp)
addi $sp, $sp, 12
move $s1, $v0

addi $sp, $sp, -12
sw $ra, 0($sp)
sw $a2, 4($sp)
sw $v1, 8($sp)
addi $sp, $sp, -4
sw $s1, 0($sp)
jal f1
lw $ra, 0($sp)
lw $a2, 4($sp)
lw $v1, 8($sp)
addi $sp, $sp, 12
move $s2, $v0

move $a0, $s2
li $v0, 1
syscall

la $a0, ($v1)
li $v0, 4
syscall

addi $sp, $sp, -12
sw $ra, 0($sp)
sw $a2, 4($sp)
sw $v1, 8($sp)
jal gi
lw $ra, 0($sp)
lw $a2, 4($sp)
lw $v1, 8($sp)
addi $sp, $sp, 12
move $s4, $v0

addi $sp, $sp, -8
sw $ra, 0($sp)
sw $v1, 4($sp)
addi $sp, $sp, -12
sw $a2, 8($sp)
li $a0, 1
sw $a0, 4($sp)
sw $s4, 0($sp)
jal f2
lw $ra, 0($sp)
lw $v1, 4($sp)
addi $sp, $sp, 8
move $a1, $v0

move $a0, $a1
li $v0, 1
syscall

la $a0, ($v1)
li $v0, 4
syscall

lw $s7, global4
addi $sp, $sp, -16
sw $ra, 4($sp)
sw $a1, 8($sp)
sw $s7, 0($sp)
sw $v1, 12($sp)
jal gi
lw $ra, 4($sp)
lw $a1, 8($sp)
lw $s7, 0($sp)
lw $v1, 12($sp)
addi $sp, $sp, 16
move $t1, $v0

addi $sp, $sp, -8
sw $ra, 0($sp)
sw $v1, 4($sp)
addi $sp, $sp, -12
sw $a1, 8($sp)
sw $s7, 4($sp)
sw $t1, 0($sp)
jal f2
lw $ra, 0($sp)
lw $v1, 4($sp)
addi $sp, $sp, 8
move $a3, $v0

move $a0, $a3
li $v0, 1
syscall

la $a0, ($v1)
li $v0, 4
syscall

addi $sp, $sp, -12
sw $ra, 0($sp)
sw $a3, 4($sp)
sw $v1, 8($sp)
jal gi
lw $ra, 0($sp)
lw $a3, 4($sp)
lw $v1, 8($sp)
addi $sp, $sp, 12
move $s3, $v0

lw $s6, global7
addi $sp, $sp, -8
sw $ra, 0($sp)
sw $v1, 4($sp)
addi $sp, $sp, -12
sw $a3, 8($sp)
sw $s3, 4($sp)
sw $s6, 0($sp)
jal f2
lw $ra, 0($sp)
lw $v1, 4($sp)
addi $sp, $sp, 8
move $s5, $v0

move $a0, $s5
li $v0, 1
syscall

la $a0, ($v1)
li $v0, 4
syscall

li $v0, 10
syscall



f1:
addi $sp, $sp, -20
Block1:
lw $t0, 20($sp)
li $a0, 0
sge $t1, $t0, $a0
bnez $t1, Block2
j Block28

Block2:
lw $t0, 20($sp)
addiu $t1, $t0, 1

move $a1, $t1
j Block3

Block3:
li $a0, 0
sle $t0, $a1, $a0
bnez $t0, Block4
j Block5

Block4:
addiu $s7, $a1, 1

move $s0, $s7
j Block6

Block5:
move $s0, $a1
j Block6

Block6:
addiu $s6, $s0, 1

move $a2, $s6
j Block7

Block7:
li $a0, 0
slt $t0, $a2, $a0
sw $t0, 16($sp)
bnez $t0, Block8
j Block9

Block8:
li $a0, 0
subu $s1, $a0, $a2
move $a2, $s1
j Block7

Block9:
move $a3, $a2
j Block10

Block10:
li $a0, 0
sgt $s3, $a3, $a0
bnez $s3, Block11
j Block12

Block11:
li $a0, 0
subu $s4, $a0, $a3
move $a3, $s4
j Block10

Block12:
move $v1, $a3
j Block13

Block13:
li $a0, 0
seq $s5, $v1, $a0
bnez $s5, Block14
j Block16

Block14:
addiu $t0, $v1, 1

move $v1, $t0
sw $t0, 12($sp)
j Block13

Block16:
li $a0, 0
sne $s2, $v1, $a0
bnez $s2, Block21
j Block21

Block21:
move $v0, $v1
addi $sp, $sp, 24
jr $ra

Block28:
lw $t0, 20($sp)
move $a1, $t0
j Block3


f2:
addi $sp, $sp, -12
Block25:
lw $s0, global4
sll $s2, $s0, 1

lw $t0, 20($sp)
addu $s7, $t0, $s2
lw $s5, global5
li $a0, 1431655766
mult $a0, $s5
mfhi $a0
sra $t1, $a0, 0
li $a0, 0
slt $a0, $s5, $a0
addu $t1, $t1, $a0

subu $t2, $s7, $t1
lw $t3, 12($sp)
li $a0, 1431655766
mult $a0, $t3
mfhi $a0
sra $v1, $a0, 0
slt $a0, $t3, $a0
addu $v1, $v1, $a0
li $a0, 3
mult $a0, $v1
mflo $a0
subu $v1, $t3, $a0

addu $a3, $t2, $v1
addiu $a1, $a3, 233

li $a0, 0
lw $t4, 16($sp)
subu $s1, $a0, $t4
addu $s3, $a1, $s1
addi $sp, $sp, -16
sw $t0, 0($sp)
sw $ra, 12($sp)
sw $t4, 4($sp)
sw $s3, 8($sp)
addi $sp, $sp, -4
sw $t4, 0($sp)
jal f1
lw $t0, 0($sp)
lw $ra, 12($sp)
lw $t4, 4($sp)
lw $s3, 8($sp)
addi $sp, $sp, 16
move $s6, $v0

addu $t5, $s3, $s6
addu $a2, $t0, $t4
addu $s4, $a2, $t5
move $v0, $s4
addi $sp, $sp, 24
jr $ra



